//This is where all the buttons are defined
let creditScreen;
let startScreen;
let physicalGames;
let emotionalGames;
let Game1;
let Game2;
let Game3;
let appName = 'Torturing The Elderly';
let settings;


//These arrays are used to simplify Nuke All and Create all respectivley
const allButtonsNuke = [];
const allButtonsCreate = [
  function() {createCreditScreenButton()},
  function() {createStartScreenButton()},
  function() {createPhysicalGamesScreenButton()},
  function() {createGame1Button()},
  function() {createGame2Button()},
  function() {createGame3Button()},
  function() {createEmotionalGamesButton()},
  function() {createSettingsButton()}
];

//This array is used to set different screens
const setScreen = [
  function() {setStartScreen()},
  function() {setCreditScreen()},
  function() {setPhysicalGamesList()},
  function() {setEmotionaGamesSenario()},
  function() {setTraceGameSenario()},
  function() {setZoomGameSenario()},
  function() {setDragGameSenario()}
];

//This changes what runs during "draw" depending on the active game
let activeGame = -1;
const runGame =[
  function() {runEmotionalGame()},
  function() {runTraceGame()},
  function() {runZoomGame()},
  function() {runDragGame()}
]

//Variables for Emotioal Games
// Declare uncommon variable names for elements and state tracking
let questionText, optionsText, feedbackText, optionColors;
let selectedOption = null;
let feedbackDuration = 2000; // Feedback duration in milliseconds
let currentRound = 0;
let allowNextRound = false; // Tracks if the next round can start

// Game rounds data
const rounds = [
  {
    question: "Choose the most morally correct decision.\n\nYou see a little boy crying over a broken toy car. You have your grocery bags with candy, milk, and other items.\n\nWhat do you do?",
    options: [
      "Walk away",
      "Comfort the boy by giving him candy and help find his mother",
      "Yell at him to 'Shut up'",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You find a wallet on the ground.\n\nWhat is the best action to take?",
    options: [
      "Take the money and throw the wallet away",
      "Turn it in to the nearest police station",
      "Keep it for yourself",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You see an elderly person struggling to cross the road.\n\nWhat should you do?",
    options: [
      "Help them cross safely",
      "Ignore them and walk past",
      "Laugh and walk away",
      "EXIT"
    ],
    correctOption: 0
  },
  {
    question: "A classmate asks to copy your homework.\n\nWhat is the best response?",
    options: [
      "Give it to them so they stop bothering you",
      "Politely refuse and suggest helping them understand the material",
      "Tell them you lost your homework",
      "EXIT"
    ],
    correctOption: 1
  },
  {
    question: "You see someone drop a $20 bill without noticing.\n\nWhat would you do?",
    options: [
      "Take it for yourself",
      "Call out and return the money",
      "Leave it on the ground",
      "EXIT"
    ],
    correctOption: 1
  }
];

//Variables for Trace Game
let targetShape; // to store the properties of the target shape
let drawnPoints = []; // to store the user's drawn points
let accuracy = 0;

//Variables for Zoom game
 let zoomFactor = 1;
let targetSize = 200;
let playerSize = 50;
let gameWon = false;
let initialDist = null;

//Variables for Drag Game
  let circleX, circleY;  
let circleRadius = 50; 
let draggingCircle = false; 
let offsetX, offsetY;
let trueCircleX;
let trueCircleY;
let circleDone = false;

let triangleX, triangleY;  
let triangleLength = 75/2; 
let draggingTriangle = false; 
let trueTriangleX;
let trueTriangleY;
let triangleDone = false;

let rectangleX, rectangleY;  
let rectangleLength = 50; 
let draggingRectangle = false; 
let trueRectangleX;
let trueRectangleY;
let RectangleDone = false;

let Quadrant = [1,2,3,4];
let cQ;
let tQ;
let rQ;









function setup() {
  createCanvas(800, 600);
  
  //details buttons Object variables 
  createAllButtons();
  //Start screen
  newScreen(0);
}


//empty
function draw() {
  if (activeGame >= 0){
    runGame[activeGame]();
  }
}

// Changes Screen, the x variable corrisponds to the screen that is changed
// resets variables and sketch mechanics back to the default
function newScreen(x) { print(x);
  activeGame = -1;
  
  // resets default changed from RGP
  textAlign(LEFT, BOTTOM);
  
  // resets default changed from Trace game
  strokeWeight(1);
  colorMode(RGB);
  stroke("black");
  fill("black")
  
  // resets default changed form Zoom game
  
  textSize(12)
  
  //makes sure that there are no buttons on screen that arnt supposed 
  nukeAllButtons();
  
  //defaults variables used in 
  
  setScreen[x]();
}



//This is where the functions to create screens go,
//all functions here should be added to the setScreen array

function setStartScreen(){
  background(200);
  settings.position(390-(59),5);
  creditScreen.position(5, 395-20);
  //appName.position(200-80,150);
  physicalGames.position((200-(80))-50,200+25);
  emotionalGames.position((200+(80)-50),200+25);
  
  
  textSize(25);
  text(appName,85,150);
  
}

function setCreditScreen(){
  background(0);
  startScreen.position(0,0);
}

function setPhysicalGamesList(){
  background(200);
  startScreen.position(0,0);
  
  game1.position(200-80, 100+50);
  game2.position(200-80, 200);
  game3.position(200-80, 300-50);
}

function setEmotionaGamesSenario(){ print("It works");
  activeGame = 0;
  
   questionText = null; optionsText= null; feedbackText= null; optionColors= null;
   selectedOption = null;
   feedbackDuration = 2000; // Feedback duration in milliseconds
   currentRound = 0;
   allowNextRound = false; // Tracks if the next round can start
  
  
  textAlign(CENTER, CENTER);
  feedbackText = "";
  optionColors = [color(255), color(255), color(255), color(255)];
}

function setTraceGameSenario(){
  activeGame = 1;
  startScreen.position(0,0);
  
  targetShape = null;
  drawnPoints = []; 
  let accuracy = 0;
  
  background(200);
  strokeWeight(5); // Thinner outline

  // Draw target shape
  fill("black");
  rect(100, 100, 200, 200); // Outer rectangle
  fill("white");
  rect(110, 110, 180, 180); // Inner rectangle

  // Store shape properties
  targetShape = {
    outer: { x: 100, y: 100, width: 200, height: 200 },
    inner: { x: 110, y: 110, width: 180, height: 180 },
  };
}

function setZoomGameSenario(){
  activeGame = 2;
  startScreen.position(0,0);
  
  zoomFactor = 1;
  targetSize = 200;
  playerSize = 50;
  gameWon = false;
  initialDist = null;
  
  textAlign(CENTER, CENTER);
}

function setDragGameSenario(){
  activeGame = 3;
  startScreen.position(0,0);
  
  circleX = null; circleY = null;  
  circleRadius = 50; 
  draggingCircle = false; 
  offsetX= null; offsetY = null;
  trueCircleX= null;
  trueCircleY= null;
  circleDone = false;

  triangleX = null; triangleY= null;  
  triangleLength = 75/2; 
  draggingTriangle = false; 
  trueTriangleX= null;
  trueTriangleY= null;
  triangleDone = false;

  rectangleX=null; rectangleY=null;  
  rectangleLength = 50; 
  trueRectangleX=null;
  trueRectangleY=null;
  RectangleDone = false;

  cQ = null;
  tQ = null;
  rQ = null;
  
  background(220);
  
  circleX = width / 2;
  circleY = height / 2;
  
  triangleX =  random(100, 700);
  triangleY = random(100, 500);
  
  rectangleX = random(100, 700);
  rectangleY = random(100, 500);
  
  cQ= random(Quadrant);
  
  
  trueCircleX = random(100, 700);
  trueCircleY = random(100, 500);
  
  
    trueTriangleX = random(100, 700);
    trueTriangleY = random(100, 500);
  
  

    trueRectangleX = random(100, 700);
    trueRectangleY = random(100, 500);
}





//This function should create all the buttons
function createAllButtons(){
  for(let i=0; i< allButtonsCreate.length; i++){
    allButtonsCreate[i]();
  }
}

//This function should make go through the array AllTheButtons and move them to the edges of the world
function nukeAllButtons(){
  for(let i=0; i< allButtonsNuke.length; i++){
    allButtonsNuke[i]();
  }
}


//This is where the functions to create buttons go

//Creates the start button
function createCreditScreenButton(){
  creditScreen = createButton('Credits', "white");
  creditScreen.position(5, 395-20);
  //creditScreen.position(200-(32),200-10); these cordinates set the button in the center of the screen

  // Sets screen to 2nd screen
  creditScreen.mousePressed(() => newScreen(1));
  //adds button Nuke code to array
  allButtonsNuke.push(function() {creditScreen.position(2000,2000)} );
}


function createStartScreenButton(){
  startScreen= createButton('Back', "white");
  startScreen.position(0,0);
  
  
  startScreen.mousePressed(() => newScreen(0));
  
  allButtonsNuke.push(function() {startScreen.position(2000,2000)});
}

function createPhysicalGamesScreenButton(){
  physicalGames = createButton('Physical Games', "white");
  physicalGames.position((200-(80))-50,200+25);
  
  physicalGames.mousePressed(() => newScreen(2));
  
  allButtonsNuke.push(function() {physicalGames.position(2000,2000)});
}

function createGame1Button(){
  game1 = createButton('Trace', "white");
  game1.position(200, 100-10);
  
  game1.mousePressed(() => newScreen(4));
  
  allButtonsNuke.push(function() {game1.position(2000,2000)});
}

function createGame2Button(){
  game2 = createButton('Zoom', "white");
  game2.position(200, 200-10);
  
  game2.mousePressed(() => newScreen(5));
  
  allButtonsNuke.push(function() {game2.position(2000,2000)});
}

function createGame3Button(){
  game3 = createButton('Drag', "white");
  game3.position(200, 300-10);
  
  game3.mousePressed(() => newScreen(6));
  
  allButtonsNuke.push(function() {game3.position(2000,2000)});
}

function createEmotionalGamesButton(){
  emotionalGames = createButton('Emotional Games', "white");
  emotionalGames.position((200+(80)-50),200+25);
  
  emotionalGames.mousePressed(() => newScreen(3));
  
  allButtonsNuke.push(function() {emotionalGames.position(2000,2000)});
}

function createSettingsButton(){
  settings = createButton('Settings', "white");
  settings.position(390-(59),5);
  
  allButtonsNuke.push(function() {settings.position(2000,2000)});
}

function createEmotionalGame1Button(){
  emotionalGame1 = createButton('game1',"white");
  emotionalGame1.position(200,100-10);
  
  //emotionalGame1.mousePressed(() => newScreen(4));
  
  allButtonsNuke.push(function() {emotionalGame1.position(2000,2000)});
}



//This is where we put the GAMES
//RPG EMOTIONAL GAMES
function runEmotionalGame(){ 
  
    background(220);

    if (currentRound < rounds.length) {
      // Display question
      fill(0);
      textSize(18);
      text(rounds[currentRound].question, width / 2, 100);

      // Display options
      textSize(16);
      for (let i = 0; i < rounds[currentRound].options.length; i++) {
        fill(optionColors[i]);
        text(rounds[currentRound].options[i], width / 2, 200 + i * 50);
      }
    } else {
      // End of game message
      fill(0);
      textSize(24);
      text("Thank you for playing!", width / 2, height / 2);
      startScreen.position(380, 400);
      startScreen.size(200,AUTO)
      //noLoop(); // Stop the loop
    }

    // Display feedback message
    if (feedbackText) {
      fill(0);
      text(feedbackText, width / 2, 450);
    }
}

  function mousePressed() {    if( activeGame == 0){ 
      if (currentRound < rounds.length && !allowNextRound) {
        // Determine which option was selected
        for (let i = 0; i < rounds[currentRound].options.length; i++) {
          if (mouseY > 190 + i * 50 && mouseY < 210 + i * 50) {
            selectedOption = i;
            checkAnswer();
            break;
          }
        }
      } else if (allowNextRound) {
        // Proceed to the next round if feedback was acknowledged
        resetOptionColors();
        feedbackText = "";
        selectedOption = null;
        allowNextRound = false;
        currentRound++;
      }
  }
                           
  if(activeGame == 3){
    if(circleDone == false){
    let distance = dist(mouseX, mouseY, circleX, circleY);
    if (distance < circleRadius) {
      draggingCircle = true;

      offsetX = circleX - mouseX;
      offsetY = circleY - mouseY;
    }
  }
  
  if(triangleDone == false){
    let distance = dist(mouseX, mouseY, triangleX , triangleY - (75/2));
    if (distance < triangleLength) {
      draggingTriangle = true;

      offsetX = triangleX - mouseX;
      offsetY = triangleY - mouseY;
    }
  }
  
  if(RectangleDone == false){
    let distance = dist(mouseX, mouseY, rectangleX + 50 , rectangleY + 50);
    if (distance < rectangleLength) {
      draggingRectangle = true;

      offsetX = rectangleX - mouseX;
      offsetY = rectangleY - mouseY;
    }
  }
  }
  }

  function checkAnswer() {     if( activeGame == 0){
    resetOptionColors();

    if (selectedOption === rounds[currentRound].correctOption) { // Correct answer
      optionColors[selectedOption] = color(0, 255, 0); // Green for correct
      feedbackText = "Correct, great job!";
      allowNextRound = true;
    } else if (selectedOption === 3) { // EXIT option
      optionColors[selectedOption] = color(200); // Dimmed for exit
      feedbackText = "Exiting... Thank you for playing!";
      newScreen(0);
      //noLoop(); // Stop the loop immediately
    } else { // Incorrect answers
      optionColors[selectedOption] = color(255, 0, 0); // Red for incorrect
      feedbackText = "That's not quite right, try again!";
    }
  }
  }

  function resetOptionColors() {     if( activeGame == 0){
    for (let i = 0; i < optionColors.length; i++) {
      optionColors[i] = color(255);
    }
  }
  }

//TRACE GAME
function runTraceGame(){
  
}

function mouseDragged() { if(activeGame == 1){
  let point = { x: mouseX, y: mouseY };
  drawnPoints.push(point);

  let withinOuter = 
    point.x >= targetShape.outer.x && 
    point.x <= targetShape.outer.x + targetShape.outer.width &&
    point.y >= targetShape.outer.y && 
    point.y <= targetShape.outer.y + targetShape.outer.height;

  let outsideInner = 
    point.x < targetShape.inner.x || 
    point.x > targetShape.inner.x + targetShape.inner.width ||
    point.y < targetShape.inner.y || 
    point.y > targetShape.inner.y + targetShape.inner.height;

  stroke(withinOuter && outsideInner ? "green" : "red");
  line(pmouseX, pmouseY, mouseX, mouseY);

  accuracy = calculateAccuracy();
}
}

function mouseReleased() { if(activeGame == 1){
  background(200);
  redrawShape();

  noStroke(); // Ensure no outline around the text
  fill(0); // Black font
  textSize(20);
  textAlign(CENTER, CENTER);
  text(`Final Accuracy: ${accuracy.toFixed(2)}%`, width / 2, 370); // Adjusted vertical position
}

  if(activeGame == 3){
  draggingCircle = false;
  draggingTriangle = false;
  draggingRectangle = false;
  }
}

function calculateAccuracy() { if(activeGame == 1){
 let correct = drawnPoints.filter(p => {
    let withinOuter =
      p.x >= targetShape.outer.x && 
      p.x <= targetShape.outer.x + targetShape.outer.width &&
      p.y >= targetShape.outer.y && 
      p.y <= targetShape.outer.y + targetShape.outer.height;

    let outsideInner = 
      p.x < targetShape.inner.x || 
      p.x > targetShape.inner.x + targetShape.inner.width ||
      p.y < targetShape.inner.y || 
      p.y > targetShape.inner.y + targetShape.inner.height;

    return withinOuter && outsideInner;
  });

  return (correct.length / drawnPoints.length) * 100;
}
}

function redrawShape() { if(activeGame == 1){
  fill("black");
  rect(targetShape.outer.x, targetShape.outer.y, targetShape.outer.width, targetShape.outer.height);
  fill("white");
  rect(targetShape.inner.x, targetShape.inner.y, targetShape.inner.width, targetShape.inner.height);
}
}

function displayFeedback(accuracy) { if(activeGame == 1){
  background(200);

  // Draw the original black and white rectangles
  fill("black");
  rect(targetShape.outer.x, targetShape.outer.y, targetShape.outer.width, targetShape.outer.height);
  fill("white");
  rect(targetShape.inner.x, targetShape.inner.y, targetShape.inner.width, targetShape.inner.height);
  
  // Optionally, redraw the user's drawn line for visual feedback
  stroke(0, 255, 0);
  for (let i = 1; i < drawnPoints.length; i++) {
    line(drawnPoints[i - 1].x, drawnPoints[i - 1].y, drawnPoints[i].x, drawnPoints[i].y);
  }
  
  // Display the accuracy text on top
  strokeWeight(0);
  fill(0);
  textSize(32);
  textAlign(CENTER, CENTER);
  text(`Accuracy: ${accuracy.toFixed(2)}%`, width / 2, height / 2);
}
}

//ZOOM GAME
function runZoomGame(){
  background(220);

  noFill();
  stroke(0);
  strokeWeight(2);
  circle(width / 2, height / 2, targetSize);

  fill(0, 255, 0);
  noStroke();
  let displaySize = playerSize * zoomFactor;
  circle(width / 2, height / 2, displaySize);

  fill(0, 0, 255); // Set text color to blue
  textSize(16);
  text("Pinch to zoom", width / 2, 30);
  text("Try to match the circle size!", width / 2, 50);

  if (gameWon) {
    fill(0, 255, 0); // Green text for winning message
    textSize(24);
    text("You won!", width / 2, height - 50);
  } else {
    fill(0, 0, 255); // Blue text for current size display
    textSize(14);
    text("Current size: " + int(displaySize), width / 2, height - 30);
  }

  if (abs(displaySize - targetSize) < 5) {
    gameWon = true;
  }
}

function touchMoved() { if(activeGame == 2){
  if (touches.length === 2) {
    let currentDist = dist(touches[0].x, touches[0].y, touches[1].x, touches[1].y);
    if (initialDist === null) {
      initialDist = currentDist;
    }
    zoomFactor = constrain(zoomFactor + (currentDist - initialDist) * 0.005, 0.1, 5);
    initialDist = currentDist;
  }
  return false;
}
                       
                       
}

function touchStarted() {
  if(activeGame == 3){
    if(circleDone == false){
    let distance = dist(touches[0].x, touches[0].y, circleX, circleY);
    if (distance < circleRadius) {
      draggingCircle = true;

      offsetX = circleX - touches[0].x;
      offsetY = circleY - touches[0].y;
    }
  }
  
  if(triangleDone == false){
    let distance = dist(touches[0].x, mouseY, triangleX , triangleY - (75/2));
    if (distance < triangleLength) {
      draggingTriangle = true;

      offsetX = triangleX - touches[0].x;
      offsetY = triangleY - touches[0].y;
    }
  }
  
  if(RectangleDone == false){
    let distance = dist(touches[0].x, mouseY, rectangleX + 50 , rectangleY + 50);
    if (distance < rectangleLength) {
      draggingRectangle = true;

      offsetX = rectangleX - touches[0].x;
      offsetY = rectangleY - touches[0].y;
    }
  }
  }
}

function touchEnded() {if(activeGame == 2){
  initialDist = null;
}
                       
  if(activeGame == 3){
  draggingCircle = false;
  draggingTriangle = false;
  draggingRectangle = false;
  }
}

function mouseWheel(event) { if(activeGame == 2){
   
  zoomFactor += event.delta * -0.001;
  zoomFactor = constrain(zoomFactor, 0.1, 5);
  
  
  return false;
}
}

//Drag Game
function runDragGame(){ if(activeGame == 3){
  background(220);

  
  fill(0);
  ellipse(trueCircleX, trueCircleY, (circleRadius * 2)+10 );
  
  triangle(trueTriangleX, trueTriangleY + 10, trueTriangleX- 55, trueTriangleY - 80, trueTriangleX + 55, trueTriangleY - 80); 
  
  rect(trueRectangleX -5, trueRectangleY -5, 110, 110)
  
  fill(255, 0, 0);
  ellipse(circleX, circleY, circleRadius * 2);
 
  triangle(triangleX, triangleY, triangleX- 50, triangleY - 75, triangleX + 50, triangleY - 75);
  
  rect(rectangleX, rectangleY, 100, 100);
  
  if (draggingCircle) {
    circleX = mouseX + offsetX;
    circleY = mouseY + offsetY;
    
    if(circleX <= trueCircleX +5 && circleX >= trueCircleX -5 &&
      circleY <= trueCircleY +5 && circleY <= trueCircleY -5){
      circleDone = true;
      draggingCircle = false;
      circleX = trueCircleX;
      circleY = trueCircleY;
    }
  }
  if (draggingTriangle) {
    triangleX = mouseX + offsetX;
    triangleY = mouseY + offsetY;
    
    if(triangleX <= trueTriangleX +5 && triangleX >= trueTriangleX -5 &&
      triangleY <= trueTriangleY +5 && triangleY <= trueTriangleY -5){
      triangleDone = true;
      draggingTriangle = false; 
      triangleX = trueTriangleX;
      triangleY = trueTriangleY;
    }
  }
  if (draggingRectangle) {
    rectangleX = mouseX + offsetX;
    rectangleY = mouseY + offsetY;
    
    if(rectangleX <= trueRectangleX +5 && rectangleX >= trueRectangleX -5 &&
      rectangleY <= trueRectangleY +5 && rectangleY <= trueRectangleY -5){
      RectangleDone = true;
      draggingRectangle = false; 
      rectangleX = trueRectangleX;
      rectangleY = trueRectangleY;
    }
  }
  
  if(circleDone && triangleDone && RectangleDone){
  strokeWeight(5);
  fill(0,255,0);
  textSize(128);
  textAlign(CENTER, CENTER);
  text("GOOD JOB", width /2, height/2);
  }
}
}
